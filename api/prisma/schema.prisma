// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Project {
  id               String   @id @default(cuid())
  title            String
  description      String
  start_at         DateTime
  due_at           DateTime
  end_at           DateTime
  advancement      Int
  product_owner    User?    @relation(fields: [product_owner_id], references: [id], onUpdate: SetNull, onDelete: SetNull)
  product_owner_id String?

  participants UserProject[]
  tickets      Ticket[]

}

model UserProject {
  id        String  @id @default(cuid())
  user      User    @relation(fields: [userId], references: [id])
  userId    String
  project   Project @relation(fields: [projectId], references: [id])
  projectId String
}

model User {
  id        String @id @default(cuid())
  lastname  String
  firstname String
  mail      String @unique
  roles     String
  password  String

  projects      UserProject[]
  owner         Project[]
  Notifications Notfications[]
  ticketUser    TicketUser[]
}

model Notfications {
  id         String   @id @default(cuid())
  created_at DateTime @default(now())
  user       User     @relation(fields: [user_id], references: [id], onDelete: Cascade)
  user_id    String
  is_read    Boolean  @default(false)
  data       Json
}

model TicketUser {
  id       String @id @default(cuid())
  user     User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId   String
  ticket   Ticket @relation(fields: [ticketId], references: [id], onDelete: Cascade)
  ticketId String

}

model Ticket {
  id             String    @id @default(cuid())
  title          String
  ticket_user_id String
  due_at         DateTime?
  project        Project   @relation(fields: [project_id], references: [id], onDelete: Cascade)
  project_id     String
  estimated_time Int?
  passed_time    Int?
  advancement    Int?
  state          State     @relation(fields: [state_id], references: [id])
  state_id       String

  ticketUser TicketUser[]
}

model State {
  id      String   @id @default(cuid())
  name    String
  tickets Ticket[]
}
