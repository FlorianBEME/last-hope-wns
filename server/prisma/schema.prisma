// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL_DOCKER")
}

generator client {
  provider = "prisma-client-js"
}

model Project {
  id               String    @id @default(cuid())
  title            String
  description      String?
  created_at       DateTime  @default(now())
  start_at         DateTime?
  end_at           DateTime?
  product_owner    User?     @relation(fields: [product_owner_id], references: [id], onUpdate: SetNull, onDelete: SetNull)
  product_owner_id String?
  estimated_time   Int?

  participants UserProject[]
  tickets      Ticket[]
}

model UserProject {
  id        String  @id @default(cuid())
  user      User    @relation(fields: [userId], references: [id])
  userId    String
  project   Project @relation(fields: [projectId], references: [id])
  projectId String
}

model User {
  id        String @id @default(cuid())
  lastname  String
  firstname String
  mail      String @unique
  roles     String
  password  String

  projects           UserProject[]
  owner              Project[]
  Notifications      Notification[]
  ticketUser         TicketUser[]
  comments           Comment[]
  ticketDurationUser TicketDurationUser[]
}

model Notification {
  id         String   @id @default(cuid())
  created_at DateTime @default(now())
  user       User     @relation(fields: [user_id], references: [id], onDelete: Cascade)
  user_id    String
  is_read    Boolean  @default(false)
  title      String
  content    String
  type       String
}

model TicketUser {
  id       String @id @default(cuid())
  user     User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId   String
  ticket   Ticket @relation(fields: [ticketId], references: [id], onDelete: Cascade)
  ticketId String
}

model Ticket {
  id             String   @id @default(cuid())
  title          String
  description    String?  @db.Text
  project        Project  @relation(fields: [project_id], references: [id], onDelete: Cascade)
  project_id     String
  estimated_time Int?
  advancement    Int?
  state          State?   @relation(fields: [state_id], references: [id])
  state_id       String?
  created_at     DateTime @default(now())
  isArchived     Boolean  @default(false)

  ticketUser         TicketUser[]
  comments           Comment[]
  ticketDurationUser TicketDurationUser[]
}

model Comment {
  id         String   @id @default(cuid())
  created_at DateTime @default(now())
  user       User     @relation(fields: [user_id], references: [id], onDelete: Cascade)
  user_id    String
  ticket     Ticket   @relation(fields: [ticket_id], references: [id], onDelete: Cascade)
  ticket_id  String
  content    String   @db.Text
}

model State {
  id      String   @id @default(cuid())
  name    String
  tickets Ticket[]
}

model TicketDurationUser {
  id            String   @id @default(cuid())
  user          User     @relation(fields: [user_id], references: [id], onDelete: Cascade)
  user_id       String
  ticket        Ticket   @relation(fields: [ticket_id], references: [id], onDelete: Cascade)
  ticket_id     String
  created_at    DateTime @default(now())
  minute_passed Int
}
